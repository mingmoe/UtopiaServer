//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// The build.gradle is a part of project utopia, under MIT License.
// See https://opensource.org/licenses/MIT for license information.
// Copyright (c) 2021 moe-org All rights reserved.
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

plugins{
    id 'java'
}

// 设置版本号选项
def buildNumber = "BuildNumber"
def versionSuffix = "VersionSuffix"
def clearVersion = "1.0.0"

// 开启中国镜像加速选项
def chinaMavenRepoKey = "ChinaMavenRepo"

// 面向所有项目的设置
allprojects {
    // 组id
    group = "moe.kawayi.org"

    // 设置项目版本号
    def projectDef = project.getProperties()

    version = clearVersion +
            (projectDef.containsKey(buildNumber) ? projectDef.get(buildNumber) : "") +
            (projectDef.containsKey(versionSuffix) ? projectDef.get(versionSuffix) : "")

    // 设置全局变量
    ext {
        // libgdx版本号
        gdxVersion = "1.10.0"
    }

    // 设置储存库
    repositories {
        maven {
            if (Boolean.parseBoolean((
                    projectDef.containsKey(chinaMavenRepoKey) ?
                            projectDef.get(chinaMavenRepoKey) :
                            "false"
            ).toString())) {
                url "https://maven.aliyun.com/nexus/content/groups/public"
            } else {
                url "https://oss.sonatype.org/content/repositories/snapshots/"
            }
        }
        mavenCentral()
        google()
        gradlePluginPortal()
    }
}

// 输出版本号
tasks.register("printVersion") {
    println(project.version)
}

// 打印版本号帮助
tasks.register("printVersionHelp") {
    println "===== version help ====="
    println "use gradle option:-P " + buildNumber + "={Build Number}"
    println "use gradle option:-P " + versionSuffix + "={Version Suffix}"
    println "default buildNumber and versionSuffix is empty"
    println "format:" + clearVersion + "{Build Number}{Version Suffix}"
    println "current finally version:" + project.version
    println "=====   help end   ====="
}

// 打印中国镜像帮助
tasks.register("printMavenRepoHelp") {
    println "===== maven help ====="
    println "use gradle option:-P " + chinaMavenRepoKey + "=true"
    println "will use china maven repo"
    println "=====  help end  ====="
}

// 对所有子项目生成Javadoc
gradle.projectsEvaluated {
    gradle ->
        {
            tasks.register("allJavadoc",Javadoc) {
                description "Collect all subproject javadoc into one directory"

                it.source subprojects.collect { project -> project.sourceSets.main.allJava }

                it.classpath = files(subprojects.collect { project -> project.sourceSets.main.compileClasspath })

                // 输出到javadoc
                it.destinationDir = new File(project.rootDir, "docs")

                // 设置
                it.failOnError = true
                it.options.setJFlags(["-Dfile.encoding=UTF-8"])
                it.options.setEncoding("UTF-8")
                it.options.setLocale("zh-cn")
                it.options.setWindowTitle("Utopia Doc")
                it.title = "Utopia Javadoc"
            }
        }
}
