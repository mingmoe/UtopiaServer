//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
// The build.gradle is a part of project utopia, under MIT License.
// See https://opensource.org/licenses/MIT for license information.
// Copyright (c) 2021 moe-org All rights reserved.
//* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

// 引入插件
buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        gradlePluginPortal()
        google()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        // spotbugs
        classpath "com.github.spotbugs.snom:spotbugs-gradle-plugin:5.0.0-beta.6"
    }
}


plugins{
    id 'java'
}

// 设置版本号选项
def buildNumber = "BuildNumber"
def versionSuffix = "VersionSuffix"
def clearVersion = "1.0.0"

// 开启中国镜像加速选项
def chinaMavenRepoKey = "ChinaMavenRepo"

// 面向所有项目的设置
allprojects {
    // 组id
    group = "moe.kawayi.org"

    // 设置项目版本号
    def projectDef = project.getProperties()

    version = clearVersion +
            (projectDef.containsKey(buildNumber) ? projectDef.get(buildNumber) : "") +
            (projectDef.containsKey(versionSuffix) ? projectDef.get(versionSuffix) : "")

    // 设置全局变量
    ext {
        // libgdx版本号
        gdxVersion = "1.10.0"

        // log4j2版本号
        log4j2Version = "2.14.1"

        // netty版本号
        nettyVersion = "4.1.69.Final"

        // junit版本号
        junitVersion = "5.8.1"

        // jackson版本号
        jacksonVersion = "2.13.0"

        // spotbugs版本号
        spotbugsVersion = "4.4.2"

        // hocon版本号
        hoconVersion = "1.4.1"

        // 发布路径
        releaseDir = "${rootDir}/output-package/"
        desktopReleaseDir = "${releaseDir}/desktop"
        serverReleaseDir =  "${releaseDir}/server"

        // javadoc输出路径
        javadocReleasePath = "docs"
    }

    // 设置储存库
    repositories {
        mavenCentral()
        mavenLocal()
        google()
        gradlePluginPortal()
    }

    // 面向所有项目设置Java编译参数
    compileJava{
        options.encoding("UTF-8")
        options.setEncoding("UTF-8")
        options.forkOptions.jvmArgs << '-Dfile.encoding=UTF-8' << '-Duser.language=es'
    }

    // 测试设置
    test {
        useJUnitPlatform()
    }
}

// 面向所有子项目设置插件
subprojects {
    apply plugin: "checkstyle"
    apply plugin: "com.github.spotbugs"
    apply plugin: "jacoco"

    // 设置checkstyle
    checkstyle {
        ignoreFailures = false

        // 定义一些变量
        // 小驼峰和大驼峰的命名设置
        configProperties.put("utopia.checkstyle.small_hump","[a-z]+[A-Za-z0-9]*")
        configProperties.put("utopia.checkstyle.large_hump","[A-Z]+[A-Za-z0-9]*")
        configProperties.put("utopia.checkstyle.always_large","[A-Z]+[A-Z0-9_]*")
    }

    // 代码分析器spotbugs设置
    spotbugs {
        ignoreFailures = false
        showStackTraces = true
        showProgress = true
        maxHeapSize = '1g'
        jvmArgs = [ '-Dfile.encoding=UTF-8' ]
    }

    // 在解析之后
    afterEvaluate {
        // jacoco报告设置
        jacocoTestReport {
            dependsOn test // 调用jacoco之前进行测试

            reports {
                // 设置输出xml/html
                xml.required = true
                html.required = true
            }
        }

        // test调用jacoco
        tasks.named("test"){
            it.finalizedBy(tasks.named("jacocoTestReport")) // 在test完成之后调用jacoco
        }
    }
}

// 输出版本号
tasks.register("printVersion") {
    println(project.version)
}

// 打印版本号帮助
tasks.register("printVersionHelp") {
    println "===== version help ====="
    println "use gradle option:-P " + buildNumber + "={Build Number}"
    println "use gradle option:-P " + versionSuffix + "={Version Suffix}"
    println "default buildNumber and versionSuffix is empty"
    println "format:" + clearVersion + "{Build Number}{Version Suffix}"
    println "current finally version:" + project.version
    println "=====   help end   ====="
}

// 打印中国镜像帮助
tasks.register("printMavenRepoHelp") {
    println "===== maven help ====="
    println "use gradle option:-P " + chinaMavenRepoKey + "=true"
    println "will use china maven repo"
    println "=====  help end  ====="
}

// 打印帮助
tasks.register("printHelp"){
    it.dependsOn(tasks.findByName("printVersionHelp"))
    it.dependsOn(tasks.findByName("printMavenRepoHelp"))

    println "===== utopia help ====="
    println "use allJavadoc tasks to collect all subproject javadoc to docs directory"
    println "use shadowJar tasks to generate jar for subproject desktop and server"
    println "=====   help end  ====="
}

// 声明
tasks.register("allJavadoc",Javadoc)
tasks.register("allJavaSourceJar",Jar)
tasks.register("allJavadocJar",Jar)

// 解析项目过后的设置
gradle.projectsEvaluated {
    gradle ->
        {
            // 生成所有子项目的javadoc
            tasks.named("allJavadoc",Javadoc) {
                description "Collect all subproject javadoc into one directory"

                it.source subprojects.collect { project -> project.sourceSets.main.allJava }

                it.classpath = files(subprojects.collect { project -> project.sourceSets.main.compileClasspath })

                // 输出到docs目录
                it.destinationDir = new File(project.rootDir, javadocReleasePath as String)

                // 设置
                it.failOnError = true
                it.options.setJFlags(["-Dfile.encoding=UTF-8","-Duser.language=es"])
                it.options.setEncoding("UTF-8")
                it.options.encoding("UTF-8")
                it.options.setLocale("zh-cn")
                it.options.setOverview(rootProject.rootDir.toString() + "/config/overview.html".toString() as String)
                it.options.setWindowTitle("Utopia Doc")
                it.title = "Utopia Javadoc ver." + rootProject.version.toString()
            }
            // 生成所有子项目的源代码的jar
            tasks.named("allJavaSourceJar",Jar){
                description "Collect all subproject source code into one jar"

                it.dependsOn(tasks.named("classes"))

                it.from subprojects.collect { project -> project.sourceSets.main.allSource }

                it.destinationDirectory.set(file("${releaseDir}"))
                it.archiveName("utopia-source-${rootProject.version.toString()}.jar")
            }
            // 生辰所有子项目的javadoc的jar
            tasks.named("allJavadocJar",Jar){
                description "Collect all subproject javadoc into one jar"

                it.dependsOn(tasks.named("allJavadoc"))

                it.from "${rootProject.rootDir.toString()}/${javadocReleasePath.toString()}"

                it.destinationDirectory.set(file("${releaseDir}"))
                it.archiveName("utopia-javadoc-${rootProject.version.toString()}.jar")
            }
        }
}
